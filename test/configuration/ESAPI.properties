#
# OWASP Enterprise Security API (ESAPI) Properties file -- PRODUCTION Version
# 
# This file is part of the Open Web Application Security Project (OWASP)
# Enterprise Security API (ESAPI) project. For details, please see
# http://www.owasp.org/index.php/ESAPI.
#
# Copyright (c) 2008,2009 - The OWASP Foundation
#
# DISCUSS: Maybe change sec_context.c to look for a default properties file under
# /etc, and then for an override properties file in a $HOME/.esapi directory.
###############################################################################
#
# WARNING: Operating system protection should be used to lock down the .esapi
# resources directory containing this properties file and all other files inside 
# and all the directories all the way up to the root directory of the file system.
# Note that if you are using file-based implementations, that some files may need
# to be read-write as they get updated dynamically.
#
# Before using, be sure to update the MasterKey and MasterSalt as described below.
#
#===========================================================================
# ESAPI Configuration
#
# If true, then print all the ESAPI properties set here when they are loaded.
# If false, they are not printed. Useful to reduce output when running unit tests.
# If you need to troubleshoot a properties related problem, turning this on may help.
# This is 'false' by default.
ESAPI.PrintProperties=false

#===========================================================================
# ESAPI Encryption
#
# The ESAPI Encryptor provides basic cryptographic functions with a simplified API.
# To get started, generate a new key using GnuPG or a similar tool.
# There is not currently any support for key rotation, so be careful when changing your key and salt as it
# will invalidate all signed, encrypted, and hashed data.
#
#		***** IMPORTANT: Do NOT forget to replace these with your own values! *****
# To calculate these values, you can run:
#		TODO: Write a keygen tool that uses esapi_fill_crypto_key().
#
Encryptor.MasterKey=
Encryptor.MasterSalt=

Encryptor.SymAlgo=AES256
Encryptor.SymAlgoMode=CBC
Encryptor.SymKey=
Encryptor.HashAlgo=SHA256
Encryptor.AsymAlgo=RSA
Encryptor.AsymPubKey=
Encryptor.AsymPrivKey=
# The crypto library initialization can optionally enable a mode intended to support 
# FIPS 140-2 requirements.  Note that this does not necessarily mean that
# the crypto library is a NIST approved FIPS 140-2 module.
Encryptor.FIPS140=false
# The crypto library initialization can optionally enable the allocation of Secure Memory 
# for any cryptographic keys.  Keys allocated in Secure Memory cannot be swapped to disk 
# by the operating system, and are immediately zeroed when freed.
Encryptor.SecureMem=false

#===========================================================================
# ESAPI Executor
#
Executor.AllowedExts=.zip,.pdf,.doc,.docx,.ppt,.pptx,.tar,.gz,.tgz,.rar,.war,.jar,.ear,.xls,.rtf,.properties,.java,.class,.txt,.xml,.jsp,.jsf,.exe,.dll
Executor.WorkingDirectory=/tmp
Executor.ApprovedExecutables=/usr/bin/sh

#===========================================================================
# ESAPI Logger
#
Logger.MaxFileSize=500000000

#===========================================================================
# ESAPI Authenticator
#
Authenticator.AllowedLoginAttempts=3
Authenticator.Quotas=/dev/hda3:24:5000:0:7:0:0
Authenticator.QuotasLen=1
Authenticator.IdleTimeout=30
Authenticator.AbsoluteTimeout=240
